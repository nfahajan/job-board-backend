generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  jobSeeker
  employer
  admin
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  REMOTE
  TEMPORARY
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  INTERVIEWING
  OFFERED
  REJECTED
  HIRED
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  role         Role
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  profile      Profile?
  resumes      Resume[]
  applications Application[]
  companies    CompanyMember[] // Allows a user to be part of multiple companies
}

model Profile {
  id           String  @id @default(uuid())
  firstName    String
  lastName     String
  phone        String?
  address      String?
  bio          String?
  profileImage String?
  userId       String  @unique
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
  id          String   @id @default(uuid())
  name        String
  description String?
  website     String?
  address     String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  jobs    Job[]
  members CompanyMember[]
}

model CompanyMember {
  id        String   @id @default(uuid())
  role      String // e.g., "owner", "recruiter", "manager"
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, companyId])
}

model Job {
  id          String    @id @default(uuid())
  title       String
  description String
  location    String
  salary      Int?
  type        JobType?
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  expiresAt   DateTime?
  isActive    Boolean   @default(true)
  skills      String[]

  applications Application[]
}

model Application {
  id          String            @id @default(uuid())
  coverLetter String?
  jobId       String
  job         Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  resumeId    String
  resume      Resume            @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  appliedAt   DateTime          @default(now())
  status      ApplicationStatus @default(PENDING)
}

model Resume {
  id        String   @id @default(uuid())
  title     String
  fileUrl   String 
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  applications Application[]
}

